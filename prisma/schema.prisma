generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id              Int                @id @default(autoincrement())
  name            String
  email           String             @unique
  password        String
  role            String
  status          String
  orders          orders[]
  receptions      receptions[]
  sales           sales[]
  products        products[]
  suppliers       suppliers[]
  inventories     inventories[]
  stockMovements  stockMovements[]

  @@map("users")
}

enum UserRole {
  ADMIN
  CAISSIER
}

model products {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  stock            Int
  sale_price       Decimal
  purchase_price   Decimal
  threshold        Int
  prescription_req Boolean
  barcode          String             @unique
  userId           Int?
  batches          batches[]
  inventories      inventories[]
  orderDetails     orderDetails[]
  receptionDetails receptionDetails[]
  saleDetails      saleDetails[]
  stockMovements   stockMovements[]
  user             users?             @relation(fields: [userId], references: [id])
}

model sales {
  id            Int           @id @default(autoincrement())
  sale_date     DateTime
  userId        Int?
  customerId      Int
  details       saleDetails[]
  user          users?         @relation(fields: [userId], references: [id])
  customer        customers     @relation(fields: [customerId], references: [id])
}

model saleDetails {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Decimal
  saleId    Int
  productId Int
  product   products @relation(fields: [productId], references: [id])
  sale      sales    @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model customers {
  id        Int      @id @default(autoincrement())
  address   String
  firstName String
  lastName  String
  phone     String   @unique
  orders    orders[]
  sales     sales[] 
}

model orders {
  id         Int            @id @default(autoincrement())
  order_date DateTime
  customerId   Int
  userId     Int?
  details    orderDetails[]
  customer     customers       @relation(fields: [customerId], references: [id])
  user       users?          @relation(fields: [userId], references: [id])
}

model orderDetails {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Decimal
  productId Int
  orderId   Int
  order     orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   products @relation(fields: [productId], references: [id])
}

model receptions {
  id               Int                @id @default(autoincrement())
  reception_date   DateTime
  supplierId     Int
  userId           Int?
  details          receptionDetails[]
  supplier         suppliers            @relation(fields: [supplierId], references: [id])
  user             users?              @relation(fields: [userId], references: [id])
}

model receptionDetails {
  id          Int        @id @default(autoincrement())
  quantity    Int
  price       Decimal
  productId   Int
  receptionId Int
  product     products   @relation(fields: [productId], references: [id])
  reception   receptions @relation(fields: [receptionId], references: [id], onDelete: Cascade)
}

model suppliers {
  id       Int    @id @default(autoincrement())
  name     String
  address  String
  contact  String
  reception receptions[]
  userId   Int?
  user     users?  @relation(fields: [userId], references: [id])
}

model batches {
  id              Int      @id @default(autoincrement())
  number          String   @unique
  quantity        Int
  expiration_date DateTime
  productId       Int
  product         products @relation(fields: [productId], references: [id])
}

model inventories {
  id             Int      @id @default(autoincrement())
  inventory_date DateTime
  stock          Int
  productId      Int
  userId         Int?
  product        products @relation(fields: [productId], references: [id])
  user           users?   @relation(fields: [userId], references: [id])
}

model stockMovements {
  id            Int      @id @default(autoincrement())
  quantity      Int
  movement_date DateTime
  type          String
  productId     Int
  userId        Int?
  product       products @relation(fields: [productId], references: [id], onDelete: Cascade)
  user          users?   @relation(fields: [userId], references: [id])
}
